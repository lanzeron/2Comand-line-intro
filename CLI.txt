1.
- ls команда для перегляду вмістимого папки, можна використовувати з аргументами, а також можна вказувати конкретне місце, для якого вирокистовується команда
- cd команда яка використовується для навігації по файлах і папках
- echo команда яка виводить введену інфу. можна виводити прямо в консоль, можна вказати куди вона буде виводитись
- pwd команда показує де знахотись юзер в даний час
- hostname команда що показує назву машини
- mkdir <DIR> команад що створює директорію може приймати аргументи -p створює всі папки якшо скажеми таких нема -v виводить інфу про кожну створену папку
-rmdir <dir> видаляє вказану директорію може приймати агрумент-P для почергового видаляння батьківських директорій, також можна використовувати аргументи -r -f щоб видаляти не порожні директорії
- cp копію файли або теки
- cat виводить вміст файлу
- mv переміщає або замінює файли
- man видає мануал по командах
- sudo дозволяє вводити команди під адміном
- touch створює порожній файл
- exit вихід
- clear очищає екран
- whoami дає інфу про того юзера який вводить команду є ще схожі команди w список підкючених юзерів і іну про них, а також команда who список юзерів час і дату входу їх.
- diff команда, Що порівнює файли
- history викликає виконані нами команди в консолі
- chmod/chown міняє права доступу
- env команда що виводить, або редагує значення змінних в середовищі (environment) bush


2. Команда ln це команда, яка встановлює звязок між файлом і іменем файла. команда ln <file1> <file2> створює жорстку ссилку, це така собі адреса файла, можна сказати що це вказівник ОС на місце знаходження даного файла. Команда ln -s <file1> <file2> створює символьну ссилку, ця ссилка може знаходитись де завгодно, не обовязково так строго як жорстка, це свого роду ярлик на файл. Цікаво, якщо змінювати будь яку з силок чи в першому чи в іншому варіанті, буде автоматично мінятись і файл. А от якщо видалити ссилку символюну, то файл не видалиться, до тих пір поки на нього вказує хоча б одна жорстка ссилка. А от коли видалити жорстку ссилку, файл видалиться


ln -s index.txt link


3. $ alias txt='grep 'some text' /home/*.txt'

4.
 History це команда для виводу введених нами команд. при введені даної команди виведеться на екран весь список команд, введений нами. можна після команди history дописати число і це виведе певну кількість команд введених останніми: history 5. можна також виводити команди по номеру, видаляти з історії.

pipeline всі комнади в bash можна виводити не тільки в консоль, а використовувати їх результат в інші команди, таким чином команди взаємодіють і виводять або кінцевий результат, або проміжний. можна наприклад обєднати команди : $ ls -l | grep rwxrwxrwxn виведе команди тільки з вказаними правами доступу. команди пишуться через вертикальну риску |

wc команда, що підраховує кількість слів, символів і стрічок в файлі
виводись спочатку кільксть стрічок, потім слів і символів

5. перенаправлення виводу. В командах команд лайн можна перенаправляти ввід з одних команд в інші. є такі стандартні потоки: стандартий ввід (stdin) стандартний вивід (stdout) і встандартний вивід помилки (stderr)
 перенаправляти ці потоки можна або за допомогою знаків "<" ">" "|"
приклади

 $ echo "some text" > index.txt запише вивід команди ехо в файлик index.txt
 
 $ grep -i "error" ./log | wc -l тут команда grep шукає в файлі log стрічки error і не виводить на екран а передає в команду wc яка в свою чергу підраховує кільськість цих стрічок

 $ echo -e "ІмяКористувача\nПароль" < index.txt (теоретично має взяти з файлика імя та пароль, \n вказується для переносу строки)
 $ ls -la > list.txt  команда перенаправляє список вайлів в якийсь вказаний файлик а не в консоль
 $ find / -name .index > list.txt 2>&1 команда find шукає файли з заданою назвою і перенаправляє потік в файл list.txt  а якшо стається помилка (скажем недостатні права чи ще щось), для того щоб не кидати ерори в консоль існує спеціальна команда 2>&1 вона дозволяє перекидати помилки теж в той самий файл.

6.

 $ find / -name *.txt шукає файли починаючи з кореневої папки з розширенням txt
 $ find / -min -5 -print шукає файли, які були створені за останні 5 хв
 $ find / -size +100M -print шукає файли з розміром більше 100мб
 $ find . -user <userId> шукає вайли, що належать певному юзеру
 $ find / -name 'test' -delete шукає всі файли з іменем test і видаляє їх


 $ grep 'my name' /home/yura/aboutmy.txt шукає в вказаному файлі стрічки з вказаним текстом
 $ grep -v 'my name' /home/yura/aboutmy.txt робить все те саме тільки навпаки виводить стрічки де нема вказаного тексту
 $ grep -l 'yura' /home/yura/*.txt команда знайде файли з розширенням txt в вказаній директорії, і виведе тільки ті з них де є вказані стрічки
 $ grep -w '\<yura' * grep -w 'friend\>'  перша команда шукає стрічки що починаються на слово yura а друга що закінчуються на слово friend
 $ grep -c 'yura' test.txt виводить число стрічок в яких є вираз

 $ sed '2d' file.txt видалить другу стрічку в заданому файлі
 $ sed 's/yura/oleg/' file.txt заміняє першу стрічку, що збігається з yura на стрічку oleg
 $ awk '{print "username: "  }' test.txt  виведе всі стрічки з вказаного файла і підставить перед ними username:
 $ awk '{print}' test.txt виведе всі стрічки з вказаного файла
 $ sed -n 1,/^$/d file.txt видалить в вказаному файлі всі стрічки до першої пустої

 
 $ sort /home/file відсортує рядки в файлі по першому полю, в порядку зростання
 $ sort -r home/file відсортує в зворотньому порядку
 $ sort /home/file -t";" -k2 -n -r відсортує по другому полю, використовуючи  числові дані  в зворотньому порядку (-t";" означає що поля розділені"'")
 $ sort /home/file -t";" k3 -f відсортує по третьому полі при чому буде ігноруватись регістр
 $ find "yura" namelist.txt | sort виведе на екран відсортований список стрічок з вказаним текстом

7. команда Tail виводить на екран останні 10 рядків вкзааного файла синтаксис tail [параметри] <назва файлу> можна використовувати ключ -n де можна вказувати кількість рядків, які необхідно вивести також є ключ -f який дозволяє стежити за файлом, якщо до нього додаються якісь рядки, вони обовязково виведуться на екран командою tail ще є ключ -с який дозволяє виводити останніх n байт. Команда часто використовується як елемент pipline при взаємодії з іншими утилітами
може бути корисною при стежені за syslog/

Приклади використання:
 $ tail /home/file виводить останні 10 стрічок файла
 $ tail -n 20 /home/file виведе останні 20 стрічок
 $ tail -f /home/file не закриється після виконання а виведе нові стрічки, якщо вони будуть добавлені до файла
 $ tail -c 25 /home/file /home/file1 можна вивести останні 25 байт файла
 $ tail -f /home/file | grep 'yura' може стежити за файлом і виводити тільки потрібні нам стрічки, що контролюється grep

